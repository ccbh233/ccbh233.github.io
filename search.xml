<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>First Blog Page</title>
    <url>/2023/10/19/First-Blog-Page/</url>
    <content><![CDATA[<p>This is TEST page <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>数据通信基础之ARP</title>
    <url>/2023/10/24/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E4%B9%8BARP/</url>
    <content><![CDATA[<h2 id="地址解析协议"><a href="#地址解析协议" class="headerlink" title="地址解析协议"></a>地址解析协议</h2><p>地址解析协议 ( Address Resolution Protocol, ARP ) 是根据IP地址获取物理地址的一个TCP&#x2F;IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。相关协议有RARP、代理ARP。</p>
<p>通俗来讲，ARP就是(<strong>基于IP地址</strong>)用来获取物理地址即MAC地址的。请求时通过<strong>广播</strong>(即将数据包发送到局域网内所有主机)的方式发送ARP请求包，然后接收返回的消息，这样就使用IP地址确定了目标的MAC地址。</p>
<div class="note info"><p>ARP 只用于 IPv4 协议中，IPv6 协议使用的是 Neighbor Discovery Protocol，译为邻居发现协议，它被纳入 ICMPv6 中。</p>
</div>

<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>基本原理就是上面所说，基于IP地址的广播然后接收回复，下面来深入了解一下。</p>
<p>在局域网中，一般基于MAC地址进行数据包的传输。假设我们第一次搭建好局域网，我们的主机(以下称<strong>A主机</strong>)是如何知道目标主机(以下称<strong>B主机</strong>)的MAC地址的呢？</p>
<p>上文提到，ARP是基于IP地址来获取MAC地址的，所以A主机首先构造一个ARP请求包，其中ARP请求报文主要包含了源(A主机)的IP地址和MAC地址、目标(B主机)的IP地址和MAC地址，其中，<strong>目标MAC地址使用 00-00-00-00-00-00 填充</strong>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CARP_Request_Message.png"
                      alt="loading-ag-144"
                ></p>
<p>之后，网络层将包传递到下一层的数据链路层，数据链路层将包的首部添加上目标MAC地址、源MAC地址和帧类型将包封装为帧，其中，**目标MAC地址使用 FF-FF-FF-FF-FF-FF 填充(表示广播地址)**，之后会以广播的形式发送出去，局域网内所有的主机都会受到该数据包。收到该数据包的主机会将该ARP报文内的目标MAC地址与自己的MAC地址进行比对，若不匹配则丢弃该ARP请求包。</p>
<p>当B主机收到数据包之后，首先比对MAC地址，发现目标MAC地址与自己的MAC地址相同时，首先将A主机的IP地址和MAC地址的对应关系添加到自己本地ARP缓存表中(下次进行基于MAC地址的数据通信可以直接调用本地ARP表中的MAC地址而不必发送ARP请求来获取MAC地址)，然后B主机将包含其MAC地址的ARP回复消息<strong>直接发送</strong>回A主机，即B主机也构造一个ARP请求包，其中ARP请求报文包含了源(B主机)的IP地址和MAC地址、目标(A主机)的IP地址和MAC地址，然后发送给A主机。当A主机收到B主机发来的ARP应答包时，会将包内B主机的IP和MAC地址的对应关系保存到自己本地ARP缓存，这就完成了一个ARP请求的整个流程。之后，A主机再向B主机发送数据时，会直接使用自己保存的MAC地址与B主机通信而无需再发送ARP请求。</p>
<p>通过 ARP 缓存，降低了网络流量的使用并缓解了网络压力，一定程度上防止了 ARP 的大量广播。</p>
<div class="note info"><p>本地ARP缓存是有生存期(有效期)的，每个动态ARP缓存项的潜在生命周期是10分钟。生存期结束后，需要再次重复上面的过程。静态ARP缓存可以长期保持有效状态。</p>
</div>

<p>我们可以使用 arp 命令查看本地ARP缓存。在 Windows 系统下，对应 arp -a &#x2F; arp -g 命令。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5Carp__a.png"
                      alt="loading-ag-359"
                ></p>
<h2 id="ARP应用"><a href="#ARP应用" class="headerlink" title="ARP应用"></a>ARP应用</h2><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>ARP请求是以广播的形式发送给所有主机的，所以每个主机有选择发送ARP应答消息的自主权，并且当其他主机收到应答报文时不会检测该报文的真实性就将其记录在本地的MAC表中，这样攻击者就可以向目标主机发送伪ARP应答报文，从而篡改本地的MAC地址表。ARP欺骗会导致目标计算机与网关通信失败，更会导致通信重定向，所有的数据都会通过攻击者的机器，因此存在极大的安全隐患。</p>
]]></content>
      <tags>
        <tag>Network Engineer</tag>
        <tag>Network Foundation</tag>
        <tag>Network System Management</tag>
      </tags>
  </entry>
  <entry>
    <title>数据通信基础之ICMP</title>
    <url>/2023/10/25/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E4%B9%8BICMP/</url>
    <content><![CDATA[<h2 id="因特网控制报文协议"><a href="#因特网控制报文协议" class="headerlink" title="因特网控制报文协议"></a>因特网控制报文协议</h2><p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。ICMP协议是一种面向无连接的网络层协议，对网络的连接状况判断非常有用。另外，ICMP只</p>
<p>通俗来讲，它用于报告错误，例如，请求的服务不可用或无法访问主机或路由器。在数据传输过程中，IP协议尽可能的保证数据包到达目的地址，但并不对数据包是否到达目的地址进行验证，因此总是会产生各种错误，ICMP应运而生。</p>
<div class="note-large blue"><div class="notel-title"><p>面向无连接</p>
</div><div class="notel-content"><p>“面向无连接”是指在通信过程中，发送方和接收方之间不需要建立持久的连接或会话，每个数据包都是独立地处理和传输的。</p>
<p>在面向无连接的协议中，每个数据包都包含了足够的信息，使得它可以独立地被路由和处理。这种方式可以使得通信更加灵活高效，因为发送方和接收方可以随时开始和停止通信，而不必事先进行连接的建立和释放操作。</p>
</div></div>

<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>实际上，ICMP就是一个差错报告机制。当数据包传输过程中出现问题时，ICMP会向源网络设备发送ICMP报文报告这个错误。另外，ICMP只会报告错误，不会修正错误，也不会通知其他设备出现错误。</p>
<h2 id="ICMP数据包"><a href="#ICMP数据包" class="headerlink" title="ICMP数据包"></a>ICMP数据包</h2><p>ICMP 标头位于 IPv4 和 IPv6 数据包标头之后。</p>
<p>在 ICMP 数据包格式中，数据包的前 32 位包含三个字段：</p>
<ul>
<li><p>类型 (8 位)：数据包的前 8 位是消息类型，它提供了消息的简要描述，以便接收网络知道它正在接收什么样的消息以及如何响应它。一些常见的消息类型如下：</p>
<ul>
<li><p>类型 0 – 回显回复</p>
</li>
<li><p>类型 3 – 目的地不可达</p>
</li>
<li><p>类型 5 – 重定向消息</p>
</li>
<li><p>类型 8 – 回显请求</p>
</li>
<li><p>类型 11 – 超时</p>
</li>
<li><p>类型 12 – 参数问题</p>
</li>
</ul>
</li>
<li><p>Code (8-bit)：Code是ICMP报文格式的后8位，这个字段携带一些关于错误信息和类型的附加信息。</p>
</li>
<li><p>校验和 (16 位)：最后 16 位用于 ICMP 数据包标头中的校验和字段。校验和用于检查完整消息的位数，并启用 ICMP 工具以确保传送完整的数据。</p>
</li>
</ul>
<p>ICMP Header 后面的是32位的 Extended Header，其作用是指出 IP Message 中的问题。字节位置由导致问题消息的指针标识，接收设备在此处查找指向问题的位置。</p>
<p>ICMP 数据包的最后一部分是可变长度的数据或有效载荷。IPv4 中包含的字节为 576 字节，IPv6 中为 1280 字节。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="file:///C:/images/ICMP__packet__structure.jpg"
                      alt="loading-ag-171"
                ></p>
<h2 id="ICMP应用"><a href="#ICMP应用" class="headerlink" title="ICMP应用"></a>ICMP应用</h2><p>ICMP由于其机制而有着比较多的应用。</p>
<ul>
<li><p>Ping： 实际上，我们熟悉的Ping命令就是使用 ICMP 进行请求和应答的。Ping是一种简单的跟踪路由，称为 echo-request 消息，用于测量数据到达目的地和返回源所花费的时间，这些回复称为 echo-replies 消息。<br>我们可以抓包来查看 Ping 的工作过程。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/049b3213-0256-4301-95bd-e66ce683fa0b.png"
                      alt="049b3213-0256-4301-95bd-e66ce683fa0b"
                ><br>添加过滤。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/7212b296-e7df-475d-9df4-bd876caddd4d.png"
                      alt="7212b296-e7df-475d-9df4-bd876caddd4d"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/1a2661bc-2545-4998-9460-8d06b2df48b1.png"
                      alt="1a2661bc-2545-4998-9460-8d06b2df48b1"
                ></p>
</li>
<li><p>Tracert： Tracert 用于了解通过互联网连接的两个设备之间的路由。它将旅程从一个路由器路由到另一个路由器，并执行跟踪路由以在数据传输之前检查网络问题。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/65f8032f-250c-401e-84b3-0e034449bcea.png"
                      alt="65f8032f-250c-401e-84b3-0e034449bcea"
                ></p>
</li>
</ul>
<h2 id="PING返回值解析"><a href="#PING返回值解析" class="headerlink" title="PING返回值解析"></a>PING返回值解析</h2><p>我们在使用Ping命令时总是会收到各种各样的返回信心，有超时、有无法访问等等。只有我们理解了Ping的返回信息，才能更好的进行网络故障检测与修正。</p>
<p>我的网络配置是这样的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/6da92391-f115-433a-9d33-568324f95834.png"
                      alt="6da92391-f115-433a-9d33-568324f95834"
                ></p>
<p>正常情况下，Ping命令返回是这样的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2ae58bf7-2fcd-4639-ac3e-b21b6060fa63.png"
                      alt="2ae58bf7-2fcd-4639-ac3e-b21b6060fa63"
                ></p>
<p>现在我们分别 Ping 10.154.250.250 和 Ping 10.155.250.250 ，会出现什么返回呢？</p>
<p>向 10.154.250.250 发送Ping请求时返回是这样的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/1bc1bb97-d17b-4c68-b950-474e9eb2e414.png"
                      alt="1bc1bb97-d17b-4c68-b950-474e9eb2e414"
                ></p>
<p>向 10.155.250.250 发送Ping请求时返回是这样的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/6bc0d444-bd65-4ab7-b422-f20ee7891d72.png"
                      alt="6bc0d444-bd65-4ab7-b422-f20ee7891d72"
                ></p>
<p>发现了吗，一个返回无法访问目标主机，一个返回请求超时，那么为什么会出现两种不一样的返回？</p>
<p>注意到 10.154.250.250 和 10.155.250.250 都是私网地址，我们的IP地址为 10.154.58.14 ，而 10.154.250.250 与我们是同一网段， 10.155.250.250 与我们不在同一网段。上文(<a href="https://ccbh233.github.io/2023/10/24/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E4%B9%8BARP/">数据通信基础之ARP</a>)在介绍ARP时就已经说过，在局域网内进行通信时一般使用MAC地址进行通信。</p>
<p>Ping 10.154.250.250 时，由于我的主机没有 10.154.250.250 的地址，因此会先发送ARP广播请求 10.154.250.250 的MAC地址，但是因为没有主机回应它，因此我的主机迟迟不能获得 10.154.250.250 的MAC地址，于是返回“无法访问目标主机”的错误信息。</p>
<p>Ping 10.155.250.250 时，由于目标与我的主机不是同一网段，于是使用ICMP协议，构建一个回送请求(echo request)数据包。之后，查询网关的MAC地址，如果已经在ARP缓存表中找到了网关的MAC地址，那么就直接使用它；如果没有找到，那么就发送一个ARP请求广播，等待网关回复一个ARP应答，告知它的MAC地址。然后将ICMP数据包封装在一个以太网帧中，其中目的MAC地址是网关的MAC地址。网关收到这个帧后，会检查MAC地址是否和自己匹配。匹配则根据目标IP地址进行路由选择。若网关知道如何到达目标IP地址就将ICMP数据包转发给下一跳，若不知道就返回一个ICMP目标不可达(destination unreachable)数据包。</p>
]]></content>
      <tags>
        <tag>Network Engineer</tag>
        <tag>Network Foundation</tag>
        <tag>Network System Management</tag>
      </tags>
  </entry>
  <entry>
    <title>数据通信基础之华为VRP系统</title>
    <url>/2023/10/20/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8D%8E%E4%B8%BAVRP%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="通用路由平台-Versatile-Routing-Platform-VRP"><a href="#通用路由平台-Versatile-Routing-Platform-VRP" class="headerlink" title="通用路由平台 (Versatile Routing Platform, VRP)"></a>通用路由平台 (Versatile Routing Platform, VRP)</h2><p>通用路由平台是华为设备的通用操作系统平台，网络工程师必须熟练掌握VRP的配置。本文主要介绍<strong>CLI界面的使用</strong>。</p>
<h2 id="命令行界面-Command-Line-Interface"><a href="#命令行界面-Command-Line-Interface" class="headerlink" title="命令行界面 (Command Line Interface)"></a>命令行界面 (Command Line Interface)</h2><p>VRP系统登陆成功后即进入命令行界面，命令行界面是工程师与网络设备进行交互的常用工具。</p>
<h2 id="基本命令结构"><a href="#基本命令结构" class="headerlink" title="基本命令结构"></a>基本命令结构</h2><p>华为提供的命令按照一定的格式设计，命令行界面提供对命令的解析，实现对设备的配置和管理。</p>
<p>对于命令系统，华为提供了以下说明：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/a2d2190a-fdb9-4621-8aa7-6ed97a5af958.png"
                      alt="a2d2190a-fdb9-4621-8aa7-6ed97a5af958"
                ></p>
<ul>
<li><p>命令字：规定了系统应该执行的功能。</p>
</li>
<li><p>关键字：特殊的字符构成，进一步约束命令，是对命令的拓展，也可用于表达命令构成逻辑而增设的补充字符串。</p>
</li>
<li><p>参数列表：是对命令执行功能的进一步约束，包括一对或多对参数名和参数值。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/97a935d5-7b06-49c7-b030-7febc57739d4.png"
                      alt="97a935d5-7b06-49c7-b030-7febc57739d4"
                ></p>
<p>每条命令包含<strong>最多一个</strong>命令字、若干关键字和参数，参数必须由参数名和参数值组成。命令字、关键字、参数名、参数值之间用空格分隔开。</p>
<p>需要注意的是，为了便于用户使用多样的命令，VRP系统将命令注册在了不同的视图下。</p>
<h2 id="命令行视图"><a href="#命令行视图" class="headerlink" title="命令行视图"></a>命令行视图</h2><p>华为设备的配置、查询命令多样，为了便于使用，VRP系统提供了多个视图 (View)，按功能将命令分别注册在不同的命令行视图下，所有的命令仅对当前视图生效。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/c4b77722-4869-4adb-9419-e982e512b341.png"
                      alt="c4b77722-4869-4adb-9419-e982e512b341"
                ></p>
<p>实际上，我们登陆系统后默认进入的视图是用户视图，它的标识为 <Huawei> 。在用户视图中不提供除查询和 ping、telnet 等工具命令之外的其他命令，同时，在用户视图中，唯一可进入的视图是系统视图，使用 system-view 命令进入系统视图。</p>
<p>系统视图则提供一些简单的全局配置命令，如果系统存在下一级配置视图，则在系统视图中须提供进入下一级配置视图的命令。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/c12674ea-f485-480f-a66e-cbdbad9c4114.png"
                      alt="c12674ea-f485-480f-a66e-cbdbad9c4114"
                ></p>
<p>一些接口的配置参数比较多，因此VRP系统提供了接口的配置视图，在系统视图中，使用命令 interface GigabitEthernet X（此处X表示一个具体接口的编号） 进入GE接口配置视图。</p>
<p>另外，VRP系统规定，一条命令中除参数值外都可以被叫做关键字。在当前视图下，当输入的字符能够匹配唯一关键字时，可以不必输入完整的关键字。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/dacc91e8-18b2-4441-b42f-45507ee2a40e.png"
                      alt="dacc91e8-18b2-4441-b42f-45507ee2a40e"
                ></p>
<p>我们还可以使用 Tab 键自动补全关键字。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/dbb34f72-578b-4f87-8e94-7f0463581618.png"
                      alt="dbb34f72-578b-4f87-8e94-7f0463581618"
                ></p>
<p>以及获取实时的指令帮助。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cd67457c-64da-409f-947b-4a46b48ddc29.png"
                      alt="cd67457c-64da-409f-947b-4a46b48ddc29"
                ></p>
<p>解读命令行错误信息。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/632fc9b9-4dea-4133-8812-4ce9f8bcded7.png"
                      alt="632fc9b9-4dea-4133-8812-4ce9f8bcded7"
                ></p>
<h2 id="undo-命令行"><a href="#undo-命令行" class="headerlink" title="undo 命令行"></a>undo 命令行</h2><p>在命令前加上undo关键字，即为undo命令行。undo命令行一般用来恢复默认或者删除某项配置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/9f1217df-9ef7-4a24-b88a-5c8dc9a3fe31.png"
                      alt="9f1217df-9ef7-4a24-b88a-5c8dc9a3fe31"
                ></p>
<h2 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/61272b5d-9ba3-4d44-9599-f55440306e51.png"
                      alt="61272b5d-9ba3-4d44-9599-f55440306e51"
                ></p>
<h2 id="常用文件系统操作命令"><a href="#常用文件系统操作命令" class="headerlink" title="常用文件系统操作命令"></a>常用文件系统操作命令</h2><p>VRP系统基于文件系统来管理设备上的文件和目录。在管理文件和目录时，经常会使用一些基本命令来查询文件或者目录的信息。</p>
<ul>
<li><p>&lt;Huawei&gt; pwd 命令用来显示当前工作目录。</p>
</li>
<li><p>&lt;Huawei&gt; dir [ &#x2F;all ] [ filename | directory ] 命令用来查看当前目录下的文件信息。</p>
</li>
<li><p>&lt;Huawei&gt; more [ &#x2F;binary ] filename [ offset ] [ all ] 命令用来查看文本文件的具体内容。▫ 本例中，在用户视图中使用dir命令，可以查看flash中的文件信息。• </p>
</li>
<li><p>&lt;Huawei&gt; cd directory 命令用来修改用户当前的工作目录。</p>
</li>
<li><p>&lt;Huawei&gt; mkdir directory 命令能够创建一个新的目录。目录名称可以包含1-64个字符。</p>
</li>
<li><p>&lt;Huawei&gt; rmdir directory 命令能够删除文件系统中的目录，此处需要注意的是，只有空目录才能被删除。</p>
</li>
<li><p>&lt;Huawei&gt; copy source-filename destination-filename 命令可以复制文件。如果目标文件已存在，系统会提示此文件将被替换。目标文件名不能与系统启动文件同名，否则系统将会出现错误提示。</p>
</li>
<li><p>&lt;Huawei&gt; move source-filename destination-filename 命令可以用来将文件移动到其他目录下。move命令只适用于在同一储存设备中移动文件。</p>
</li>
<li><p>&lt;Huawei&gt; rename old-name new-name 命令可以用来对目录或文件进行重命名。</p>
</li>
<li><p>&lt;Huawei&gt; delete [ &#x2F;unreserved ] [ &#x2F;force ] { filename | devicename } 命令可以用来删除文件。不带 unreserved 参数的情况下，被删除的文件将直接被移动到回收站。回收站中的文件也可以通过执行 undelete 命令进行恢复，但是如果执行 delete 命令时指定了 unreserved 参数，则文件将被永久删除。在删除文件时，系统会提示“是否确定删除文件”，但如果命令中指定了 &#x2F;force 参数，系统将不会给出任何提示信息。filename 参数指的是需要删除的文件的名称， devicename 参数指定了储存设备的名称。</p>
</li>
<li><p>&lt;Huawei&gt; reset recycle-bin [ filename | devicename ] 可以用来永久删除回收站中的文件，filename 参数指定了需要永久删除的文件的名称，device-name 参数指定了储存设备的名称。</p>
</li>
</ul>
<h2 id="基本配置命令"><a href="#基本配置命令" class="headerlink" title="基本配置命令"></a>基本配置命令</h2>]]></content>
      <tags>
        <tag>Network Engineer</tag>
        <tag>HCIA</tag>
      </tags>
  </entry>
  <entry>
    <title>数据通信基础之网络设备</title>
    <url>/2023/10/20/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h2 id="数据通信网络"><a href="#数据通信网络" class="headerlink" title="数据通信网络"></a>数据通信网络</h2><p>数据通信网络是由路由器、交换机、防火墙、无线控制器、无线接入点，以及个人电脑、网络打印机、服务器等设备构成的通信网络，其最最基本的功能是<strong>实现数据互通</strong>。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>距离终端用户最近的设备，用于终端用户接入网络、对数据帧进行交换等。</p>
<ul>
<li><p>终端设备网络接入</p>
</li>
<li><p>二层交换（Layer 2 Switching）</p>
</li>
</ul>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><strong>网络层设备</strong>，可在因特网中进行数据报文转发。为数据报文选择一条合适的路径使之能到达目的地址，此即为路由。路由器根据所收到的报文的目的地址将报文传送到下一个路由器或目的地，路径中最后的路由器负责将报文送交目的主机。</p>
<ul>
<li><p>实现同类型网络或异种网络之间的通信</p>
</li>
<li><p>隔离广播域</p>
</li>
<li><p>维护路由表（Routing Table）、运行路由协议</p>
</li>
<li><p>路径（路由信息）选择、IP报文转发</p>
</li>
<li><p>广域网接入、网络地址转换</p>
</li>
<li><p>连接通过交换机组建的二层网络</p>
</li>
</ul>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>网络安全设备，用于控制两个网络之间的安全通信。它通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，以此来实现对网络的安全保护。</p>
<ul>
<li><p>隔离不同安全级别的网络</p>
</li>
<li><p>实现不同安全级别网络间的访问控制（安全策略）</p>
</li>
<li><p>用户身份认证</p>
</li>
<li><p>实现远程接入功能</p>
</li>
<li><p>实现数据加密及虚拟专用网业务</p>
</li>
<li><p>执行网络地址转换</p>
</li>
<li><p>其他安全功能</p>
</li>
</ul>
<h2 id="无线设备"><a href="#无线设备" class="headerlink" title="无线设备"></a>无线设备</h2>]]></content>
      <tags>
        <tag>Network Engineer</tag>
        <tag>Network System Management</tag>
      </tags>
  </entry>
  <entry>
    <title>网络基础之以太网</title>
    <url>/2023/10/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BB%A5%E5%A4%AA%E7%BD%91/</url>
    <content><![CDATA[<h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><p>以太网（Ethernet）是一种计算机局域网技术，说白了就是局域网，IEEE组织的 IEEE 802.3 标准制定了以太网的技术标准规定了包括物理层的连线、电子信号和介质访问层协议的内容。</p>
<p>以太网分为经典以太网和交换式以太网两类，其中交换式以太网又有快速以太网、千兆以太网和万兆以太网的形式。</p>
<h3 id="经典以太网"><a href="#经典以太网" class="headerlink" title="经典以太网"></a>经典以太网</h3><p>经典以太网使用一根长电缆连接所有计算机。以太网有电缆最大长度限制，超过这个范围信号将无法传播（可以使用物理层设备比如中继器放大、重发信号），信息的发送使用曼彻斯特编码。</p>
<p>经典以太网使用 1-坚持 CSMA&#x2F;CD 算法。</p>
<p>由于其使用一个长电缆连接所有电脑，所以当以太网规模大时，出现故障很难定位到故障位置。</p>
<h3 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h3><p>交换式以太网的核心是一个交换机（相当于不会发生信号冲突的集线器）。交换机只把帧输出到该帧想去的端口，通过简单的插入或者拔出电缆就能完成添加或者删除一台机器。如果出现问题，尝试更换一台交换机就能解决问题。</p>
<h3 id="载波侦听多路访问"><a href="#载波侦听多路访问" class="headerlink" title="载波侦听多路访问"></a>载波侦听多路访问</h3><p>CSMA（Carrier Sense Multiple Access，载波侦听多路访问）是一种常见的访问协议，用于在共享媒体上进行数据传输。它被广泛应用于以太网等局域网和广域网中。</p>
<p>CSMA协议的基本原理是，在发送数据之前，设备会先侦听网络上是否有其他设备正在发送数据。如果检测到有其他设备在发送数据，当前设备会等待一段时间，直到网络空闲为止。一旦网络空闲，设备才会开始发送数据。</p>
<div class="note info"><p>CSMA协议仅依靠”载波侦听”的机制来判断网络是否处于忙碌状态。如果设备在发送数据之前侦听到了载波信号，即表示网络正在被占用，设备会等待一段时间再尝试发送。然而，由于多个设备可能同时开始发送数据，这就可能导致碰撞（collision）的问题。当多个设备在同一时间尝试发送数据时，它们的信号会相互干扰，导致数据损坏。</p>
</div>

<p>通过CSMA协议，设备可以按照一定的规则共享网络资源，避免数据冲突和碰撞，从而提高网络的传输效率和公平性。随着技术的进步，CSMA协议也发展出了不同的变体，如非坚持CSMA、1-坚持CSMA等，以满足不同场景下的需求。</p>
<p>在网络负载较重的情况下。CSMA仍然会发生数据碰撞。而 CSMA&#x2F;CD 在发送数据之前不仅会侦听网络，而且还会检测网络上是否存在碰撞信号。如果存在碰撞，则会立即停止发送数据，并通过特殊的反馈机制（反弹，发送信号加强冲突）通知网络中的其他计算机停止发送数据。计算机之间将等待随机时间，然后重新尝试发送数据。</p>
<p>在发送帧之前，先监听信道（载波），若信道空闲则将帧完整发送出去，若信道忙则推迟发送。</p>
<div class="note-large blue"><div class="notel-title"><p>载波侦听多路访问</p>
</div><div class="notel-content"><ul>
<li><p>1-坚持CSMA</p>
<p>信道忙不能发送数据帧时，开始一直监听信道，一旦发现信道空闲马上发送数据。</p>
</li>
<li><p>非坚持CSMA</p>
<p>信道忙不能发送数据帧时，不立即监听信道，而是随机等待一段时间后再侦听信道。</p>
</li>
<li><p>P-坚持CSMA</p>
<p>有P的几率执行 1-坚持CSMA 的方案，有1-P的几率执行 非坚持CSMA 的方案。</p>
</li>
</ul>
</div></div>

<p>实际上，这三种协议在发生冲突后还是会坚持把数据帧发送完，往往造成资源浪费。</p>
<h3 id="载波侦听多路访问与冲突检测"><a href="#载波侦听多路访问与冲突检测" class="headerlink" title="载波侦听多路访问与冲突检测"></a>载波侦听多路访问与冲突检测</h3><p>CSMA&#x2F;CD（Carrier Sense Multiple Access with Collision Detection，载波侦听多路访问与冲突检测）是一种用于以太网等局域网中的访问协议。</p>
<p>CSMA&#x2F;CD协议扩展了基本的CSMA协议，增加了冲突检测机制。它的基本原理如下：</p>
<ul>
<li><p>载波侦听（Carrier Sense）：设备在发送数据之前，会侦听网络上是否有其他设备正在发送数据。如果检测到载波信号，表示网络正在被占用，设备会等待。</p>
</li>
<li><p>冲突检测（Collision Detection）：当一个设备开始发送数据后，它会继续侦听网络，以检测是否有其他设备也在发送数据。如果发现与自己发送的数据冲突（即多个设备同时发送导致干扰），设备会立即停止发送，并发送一个干扰信号给其他设备，以通知它们发生了冲突。</p>
</li>
<li><p>退避算法（Backoff Algorithm）：当冲突发生后，参与冲突的设备会等待一段随机的时间，然后再次尝试发送数据。这个随机的退避时间能够降低碰撞的概率，增加发送成功的机会。如果多次重试后仍然发生冲突，设备会停止发送并报告发送失败。</p>
</li>
</ul>
<p>通过CSMA&#x2F;CD协议，多个设备可以共享同一以太网媒体进行数据传输。当冲突发生时，协议能够迅速检测到并采取相应的措施（比如停止发送数据帧），以减少数据冲突以及资源浪费。</p>
<div class="note-large red"><div class="notel-title"><p>先听后发为什么还会冲突</p>
</div><div class="notel-content"><p>因为电磁波的传播速率有限。</p>
</div></div>

<p>当重传达16次仍不成功时便认为此帧永远无法正确发出，抛弃此帧并向高层报错。</p>
]]></content>
      <tags>
        <tag>Network Foundation</tag>
      </tags>
  </entry>
</search>
